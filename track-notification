#!/usr/bin/env python
import os
import subprocess
import logging
from gi.repository import GLib
import dbus
import dbus.mainloop.glib

def remove_prefix(text, prefix):
    return text[text.startswith(prefix) and len(prefix):]

def nr(arg): 
    return f"<span color='#b8c5d9'>{arg}</span>"

def fa(arg): 
    return f"<span color=\'{arg}\' font-family='Font Awesome 6 Pro'>"

def mpd_music_dir() -> str:
    XDG_CONFIG_HOME = os.environ.get("XDG_CONFIG_HOME")
    mpd_music_dir = os.environ.get("XDG_MUSIC_DIR") or "~/music/"
    try:
        with open(f'{XDG_CONFIG_HOME}/mpd/mpd.conf', 'r') as fp:
            lines = fp.readlines()
            for row in lines:
                word = 'music_directory'
                if row.find(word) != -1:
                    mpd_music_dir=row.split()[1].strip('\"')
                    if mpd_music_dir[0] == '~':
                        home = os.environ.get("HOME")
                        if home is not None and home:
                            mpd_music_dir = home + mpd_music_dir[1:]
                    break
    except FileNotFoundError:
        return mpd_music_dir
    return mpd_music_dir

def track_notify(art):
    def extract_generic_tags_data(info):
        for t in track_metadata:
            if '=' in t:
                split=t.split('=')
                split[0] = split[0].strip().lower()
                info[split[0].lower()]=split[1]
        if info['date']:
            info['year']=''
        info={k: v for k, v in info.items() if v}
        for t in 'artist', 'album', 'label', 'genre', 'year', 'date':
            if t in info.keys():
                info_lines.append(nr(f"{prefix[t]} {info[t]}"))

    def extract_mp3_tags_data(info):
        mp3_tags_info=subprocess.check_output(["id3info", track_path]).decode().split('\n')
        for t in mp3_tags_info:
            if t.startswith('=== TPE1'):
                info['artist'] = t.split(':', 1)[1].strip()
            if t.startswith('=== TALB'):
                info['album'] = t.split(':', 1)[1].strip()
            if t.startswith('=== TYER'):
                info['year'] = t.split(':', 1)[1].strip()
        for t in 'artist', 'album', 'label', 'genre', 'year', 'date':
            if t in info.keys():
                info_lines.append(nr(f"{prefix[t]} {info[t]}"))

    if art is None or not art:
        return

    print(f'mpd_music_dir={mpd_music_dir}')
    track_path=subprocess.check_output(["mpc", "current", "-f", f"{mpd_music_dir()}/%file%"]).decode().rstrip()
    prefix={
        "artist":         f"{fa('#004E4E')}  </span>",
        "album":          f"{fa('#004E4E')}  </span>",
        "label":          f"{fa('#004E4E')}  </span>",
        "audio_quality":  f"{fa('#004E4E')}  </span>",
        "genre":          f"{fa('#004E4E')}  </span>",
        "quality":        f"{fa('#004E4E')}  </span>",
        "year":           f"{fa('#004E4E')}  </span>",
        "date":           f"{fa('#004E4E')}  </span>",
    }

    info_lines=[]
    info={}

    if not track_path:
        return

    if not os.access(track_path, os.R_OK):
        return

    track_metadata=subprocess.check_output(["sox", "--i", track_path]).decode().split('\n')
    if not track_path.endswith('.mp3'):
        extract_generic_tags_data(info)
    else:
        extract_mp3_tags_data(info)

    audio_quality={}
    for t in track_metadata:
        if ':' in t:
            split=t.split(':')
            split[0] = split[0].strip().lower()
            if split[0] not in {'comments', 'comment', 'input file', 'duration'}:
                audio_quality[split[0]]=split[1].split(',')[0].strip()

    song_info=""
    encoding=audio_quality.get('sample encoding','')
    channels=audio_quality.get('channels','')
    bitrate=audio_quality.get('bit rate','')
    samplerate=int(float(audio_quality.get('sample rate',''))/1000.)
    precision=audio_quality.get('precision','')
    if 'FLAC' in encoding:
        song_info+='FLAC·'
    if 'MPEG' in encoding:
        song_info+='MPEG·'
    if 'Direct Stream Digital' in encoding:
        song_info+='DSD·'
    song_info=f'{prefix["quality"]} {song_info}{bitrate}·{samplerate}K/{precision}·{channels}'.strip()
    info_lines.append(nr(song_info))
    output=""
    for line in info_lines:
        if line is not None and line:
            output += line + '\n'
    output=f"\n{output}\n​"
    subprocess.check_output(["swaync-client", "--hide-latest"])
    subprocess.check_output(
        ["dunstify", "-p", "-a", "mpd", "-h", "string:fgcolor:#17272D",
        "-u", "normal", "-i", art, "", output, "-t", "4000"])

class TrackNotification():
    debug=False
    def __init__(self):
        dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)
        self.display_prefix = ""
        self.player = None
        self.bus = dbus.SessionBus()
        self.update_players()
        self.md5sums=[]
        proxy=self.bus.get_object("org.mpris.MediaPlayer2.mpd", "/org/mpris/MediaPlayer2")
        proxy.connect_to_signal("PropertiesChanged", self.playing_song_changed)
        if TrackNotification.debug:
            self.bus.add_signal_receiver(
                self.catchall_signal_handler,
                interface_keyword='dbus_interface',
                dbus_interface="org.mpris.MediaPlayer2.Player",
                member_keyword='member'
            )
        mainloop = GLib.MainLoop()
        mainloop.run()

    def prop(self, ret, prop_name):
        try:
            ret = self.player.Get(
                'org.mpris.MediaPlayer2.Player',
                prop_name,
                dbus_interface='org.freedesktop.DBus.Properties'
            )
        except Exception as _:
            pass
        return ret

    def metadata(self): return self.prop({}, 'Metadata')

    def catchall_signal_handler(self, *args, **kwargs):
        print ("Caught signal (in catchall handler) " + kwargs['dbus_interface'] + "." + kwargs['member'])
        for arg in args:
            print("        " + str(arg))

    def get_name(self, player_name, player_names) -> str:
        if player_name not in player_names:
            return ""
        name = ".".join(player_name.split(".")[3:])
        return name

    def playing_song_changed(self, one, two, three):
        print(one)
        print(two)
        print(three)
        cover=False
        data = self.metadata()
        try:
            cover=data['mpris:artUrl']
        except Exception as _:
            log.error(f'No cover :: {data}')
        if cover:
            try:
                cover=remove_prefix(cover, 'file://')
                cover_sum=subprocess.check_output(
                    ["md5sum", cover]
                ).decode("utf-8").strip()
                self.md5sums.append(cover_sum.split()[0])
            except subprocess.CalledProcessError:
                log.error('Cannot do mpd5sum for file')
                return
            if not self.md5sums:
                log.error('No md5sums')
            elif len(self.md5sums) == 1:
                track_notify(cover)
            elif self.md5sums[-1] != self.md5sums[-2]:
                track_notify(cover)
            del self.md5sums[:-2]

    def update_players(self):
        player_names = [
            service for service in getattr(self.bus, 'list_names')()
            if service.startswith('org.mpris.MediaPlayer2.')
        ]
        players = [
            self.bus.get_object(service, '/org/mpris/MediaPlayer2')
            for service in player_names
        ]
        for index, player in enumerate(player_names):
            if self.get_name(player, player_names) == 'mpd':
                self.player = players[index]

log=logging.getLogger()
t=TrackNotification()
